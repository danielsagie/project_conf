name: Deploy Infrastructure 
on: 
  push:
    branches:
      - master
    paths: 
    - eks_conf/**
    - argo-cd_conf/**
    - test/**

env:      
    AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  stagging:
    name: test Infrastructure
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: "test"
    env:
      TF_WORKSPACE: staging
      TF_VAR_state: "./terraform.tfstate.d/staging/terraform.tfstate"
      TF_VAR_bucket_name: "market-app-bucket-staging-liron"
      TF_VAR_cluster-name: "market-app-cluster-stagging-liron"

    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3
  
    - name: setup AWS
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    - name : configure AWS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: create producrion bucket
      run: |
        bucket_name="market-app-bucket-prod-liron"
        if ! aws s3api head-bucket --bucket "$bucket_name"; then
          aws s3 mb s3://"$bucket_name"
        fi
      continue-on-error: true
    
    - name: Terraform Init staging
      id: init
      run: terraform init
      
    - name: Terraform Plan staging
      id: plan
      run: |
        terraform plan --no-color
      continue-on-error: true

    - name: Terraform Apply staging
      id: apply
      run: |
        for i in {1..5}
        do
          terraform apply -auto-approve && break || sleep 10
        done

    - name: Sync state from Staging to Production
      run: |
        aws s3 sync s3://market-app-bucket-staging-liron/ s3://market-app-bucket-prod-liron/
    
    - name: cleaning staging bucket
      run: |
        aws s3 rm s3://market-app-bucket-staging-liron --recursive
    
    - name: Terraform destroy staging
      id: destroy
      run: |
        terraform destroy -auto-approve 



  production:
    needs: stagging
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: "test"
    env:
      TF_WORKSPACE: production
      TF_VAR_bucket_name: "market-app-bucket-prod-liron"
      TF_VAR_state: "./terraform.tfstate"
      TF_VAR_cluster-name: "market-app-cluster-prod-liron"
      
    steps:
      
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: setup AWS
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    - name : configure AWS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: pull state
      run: |
        aws s3 cp s3://market-app-bucket-prod-liron/terraform.tfstate .

    - name: change bucket name
      run: |
        exist=$(aws s3 cp s3://market-app-bucket-prod-liron/counter.txt - >> /dev/null)
        if [ exist -ne 0 ]; then
        touch counter.txt && echo "0" > counter.txt && aws cp counter.txt s3://market-app-bucket-prod-liron/
        else
        counter=aws s3 cp s3://market-app-bucket-prod-liron/counter.txt
        counter = counter+1
        echo $counter > counter.txt
        aws s3 sync ./counter.txt s3://market-app-bucket-prod-liron/counter.txt
        fi
      env:
        TF_VAR_bucket_name: "market-app-bucket-prod-liron[${counter}]"
      
    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
    - name: Terraform Init production
      id: init
      run: terraform init
            
    - name: Terraform Plan production
      id: plan
      run: |
        terraform plan -no-color
      continue-on-error: true
      
    - name: Terraform Apply production
      id: apply
      run: |
        for i in {1..5}
        do
          terraform apply -auto-approve && break || sleep 10
        done


  # deploy_argo:
  #     needs: deploy_infrastructure
  #     name: Deploy argo
  #     runs-on: ubuntu-latest
  #     defaults:
  #       run:
  #         working-directory: "argo-cd_conf"
  #     steps:

  #     - name: Checkout Repo
  #       uses: actions/checkout@v3

  #     - name: Terraform Setup
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #           terraform_version: 1.3.0
  #       env:
  #           GH_TOKEN: ${{ secrets.GH_TOKEN }}
                
  #     - name: Terraform Init
  #       id: init
  #       run: terraform init
        
        
  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color
        
  #     - name: Terraform Plan
  #       id: plan
  #       run: terraform plan -no-color
  #       continue-on-error: true