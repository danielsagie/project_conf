name: Deploy Infrastructure 
on: 
  push:
    branches:
      - master
    paths: 
    - eks_conf/**
    - argo-cd_conf/**

env:      
    AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  stagging:
    name: test Infrastructure
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: "eks_conf"
    env:
      TF_WORKSPACE: staging
      TF_VAR_state: "./terraform.tfstate.d/staging/terraform.tfstate"
      TF_VAR_bucket: "market-app-bucket-stagging-liron"
      TF_VAR_cluster_name: "market-app-cluster-stagging-liron"

    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3
  
    - name: setup AWS
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    - name : configure AWS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        # TF_ACTION_WORKING_DIR: "eks_conf"

    - name: pwd
      id: pwd
      run: pwd

    - name: Terraform Init
      id: init
      run: terraform init
      
    - name: ls
      id: ls
      run: |
         ls -lR 
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
    # - name: Terraform Plan
    #   id: plan
    #   run: |
    #     terraform plan -no-color
    #   continue-on-error: true

    - name: Terraform Apply
      id: apply
      run: |
        for i in {1..5}
        do
          terraform apply -auto-approve && break || sleep 10
        done

  production:
    needs: stagging
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: "eks_conf"
    env:
      TF_WORKSPACE: production
      TF_VAR_bucket: "market-app-bucket-prod-liron"
      TF_VAR_state: "./data/terraform.tfstate"
      TF_VAR_cluster_name: "market-app-cluster-prod-liron"
      
    steps:
      
    - name: Checkout Repo
      uses: actions/checkout@v3
          
            
      
    # - name: setup AWS
    #   uses: aws-actions/setup-sam@v2
    #   with:
    #     use-installer: true
    - name: retrieve state
      uses: keithweaver/aws-s3-github-action@v1.0.0
      with:
        command: sync
        source: "market-app-bucket-stagging-liron"
        destination: ./data/
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_region: us-east-1
        flags: --delete
      
      
    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
    - name: pwd
      id: pwd
      run: pwd
      
      
      
    - name: Terraform Init
      id: init
      run: terraform init
            
    - name: ls
      id: ls
      run: |
          ls -lR 
            
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
            
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color
      continue-on-error: true
      
    - name: Terraform Apply
      id: apply
      run: |
        for i in {1..5}
        do
          terraform apply -auto-approve && break || sleep 10
        done
      
      
          
    # - name: Terraform destroy
    #   if: always()
    #   id: destroy
    #   run: |
    #     terraform destroy -auto-approve


    
  destroy_stagging:
    name: destroy staging
    runs_on: ubuntu-latest
    defaults:
      run:
        working-directory: "eks_conf"
    env:
      TF_WORKSPACE: staging
      TF_VAR_state: "./terraform.tfstate.d/staging/terraform.tfstate"
      TF_VAR_bucket: "market-app-bucket-stagging-liron"
      TF_VAR_cluster_name: "market-app-cluster-stagging-liron"
      
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
          
    - name: setup AWS
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    - name : configure AWS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v2
      with:
          terraform_version: 1.3.0
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    
    # - name: Terraform destroy
    #   if: always()
    #   id: destroy
    #   run: |
    #     terraform destroy -auto-approve




  # deploy_argo:
  #     needs: deploy_infrastructure
  #     name: Deploy argo
  #     runs-on: ubuntu-latest
  #     defaults:
  #       run:
  #         working-directory: "argo-cd_conf"
  #     steps:

  #     - name: Checkout Repo
  #       uses: actions/checkout@v3

  #     - name: Terraform Setup
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #           terraform_version: 1.3.0
  #       env:
  #           GH_TOKEN: ${{ secrets.GH_TOKEN }}
                
  #     - name: Terraform Init
  #       id: init
  #       run: terraform init
        
        
  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color
        
  #     - name: Terraform Plan
  #       id: plan
  #       run: terraform plan -no-color
  #       continue-on-error: true